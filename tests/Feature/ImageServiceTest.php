<?php

namespace Tests\Feature;

use App\Services\Images\IImageService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class ImageServiceTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Storage::fake('local');
    }

    /**
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function testSave()
    {
        list($service, $folder, $saveName, $image) = $this->getTestData();

        $service->save($image->getRealPath(), $saveName);

        Storage::assertExists($folder . "/small/$saveName");
        Storage::assertExists($folder . "/middle/$saveName");
        Storage::assertExists($folder . "/big/$saveName");
    }

    /**
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function testRemove()
    {
        list($service, $folder, $saveName, $image) = $this->getTestData();

        $service->save($image->getRealPath(), $saveName);
        $service->remove($saveName);

        Storage::assertMissing($folder . "/small/$saveName");
        Storage::assertMissing($folder . "/middle/$saveName");
        Storage::assertMissing($folder . "/big/$saveName");
    }

    /**
     * @return array
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    protected function getTestData(): array
    {
        $service = $this->app->make(IImageService::class);
        $folder = "public/images";
        $fileName = "test_image.jpg";
        $ext = 'jpg';
        $saveName = md5($fileName) . ".$ext";
        $image = UploadedFile::fake()->image($fileName, 1024, 768);
        return array($service, $folder, $saveName, $image);
    }
}
